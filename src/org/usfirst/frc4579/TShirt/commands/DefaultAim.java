// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.TShirt.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4579.TShirt.Robot;

/**
 *
 */
public class DefaultAim extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DefaultAim() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    private final double slewStepSize  = 20.0/50.0;  // degrees/sec divided by 50 executions/sec  Add to smartdashboard?
    private double m_commandedArmAngle = 0.0;
    
    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.liftArm.initialize();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	switch (Robot.liftArm.getTophatState()) {
    	
    	case FORWARD: // Lowering the arm
    		
    	    // if we arn't already at the lower limit
    		if (!Robot.liftArm.atLowerArmLimit()) {
    			// Lower the arm angle a step.
    			m_commandedArmAngle += slewStepSize;
        		Robot.liftArm.setLiftArmAngle(m_commandedArmAngle);
    		}
    		
    		break;
    		
    	case BACKWARD: // Raising the arm
    	
    	    // if we arn't already at the upper limit
    		if (!Robot.liftArm.atUpperArmLimit()) {
    			// Raise the arm angle a step.
    			m_commandedArmAngle -= slewStepSize;
        		Robot.liftArm.setLiftArmAngle(m_commandedArmAngle);
    		}
    		
    		break;
    		
    	case NEUTRAL: // Nothing to do}
    		break;
    		
    	case ERROR:  // Unexpected value returned from the tophat
    		
    		// Print out error message?
    		// Throw an exception?    		
    		break;
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.liftArm.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
