// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.TShirt.subsystems;

import java.util.EnumMap;

import org.usfirst.frc4579.TShirt.RobotMap;
import org.usfirst.frc4579.TShirt.commands.*;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Relay.Value;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class CompressedAirTank extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Relay airReleaseRelaySolenoid = RobotMap.compressedAirTankAirReleaseRelaySolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Define three lengths of time that the pressure release valve can be open.
	public enum AIRSHOTLENGTH {SHORT, MEDIUM, LONG};
	
	// Mapping of these three abstract lengths of time to actual times in milliseconds.
	private static EnumMap<AIRSHOTLENGTH, Integer> m_shotLengthMap = 
			new EnumMap<AIRSHOTLENGTH, Integer>(AIRSHOTLENGTH.class);
	
	// Mapping of the current AIRSHOTLENGTH to the next if the AIRSHOTLENGTH button is hit.
	private EnumMap<AIRSHOTLENGTH, AIRSHOTLENGTH> m_nextShotLengthMap = 
			new EnumMap<AIRSHOTLENGTH, AIRSHOTLENGTH>(AIRSHOTLENGTH.class);
	
	private AIRSHOTLENGTH m_currentAirShotLength = AIRSHOTLENGTH.SHORT;
	
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
	public void initialize() {
    	
    	// Initialize the enumMap's
    	
    	m_shotLengthMap.put(AIRSHOTLENGTH.SHORT,  100); // milliseconds
    	m_shotLengthMap.put(AIRSHOTLENGTH.MEDIUM, 200);
    	m_shotLengthMap.put(AIRSHOTLENGTH.LONG,   300);
		
    	m_nextShotLengthMap.put(AIRSHOTLENGTH.SHORT,  AIRSHOTLENGTH.MEDIUM);
    	m_nextShotLengthMap.put(AIRSHOTLENGTH.MEDIUM, AIRSHOTLENGTH.LONG);
    	m_nextShotLengthMap.put(AIRSHOTLENGTH.LONG,   AIRSHOTLENGTH.SHORT);
	}
	
	// Returns how long (in ms) the valve should be left open based on the selected
	// AIRSHOTLENGTH.
	public int getValveOpenTime(){
		return m_shotLengthMap.get(m_currentAirShotLength);
	}
	
	// Called to cycle the current AIRSHOTLENGTH to the next value.
	public void setNextShotLength () {
		m_currentAirShotLength = m_nextShotLengthMap.get(m_currentAirShotLength);
	}
	
	// Opens the tank air pressure release valve.
    public void openTankValve () {
    	airReleaseRelaySolenoid.set(Value.kOn);
    }
    
    // Closes the tank air pressure release valve.
    public void closeTankValve () {
    	airReleaseRelaySolenoid.set(Value.kOff);
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());

    }
}

